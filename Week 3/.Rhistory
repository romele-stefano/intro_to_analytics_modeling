str(train)
str(data)
0.7*654
train <- data[s == 1,]
train <- data[s == 2,]
train <- data[s == 3,]
s <- sample(1:3, size = nrow(data), prob = c(0.7, 0.15, 0.15), replace = TRUE)
train <- data[s == 1,]
validation <- data[s == 2,]
test <- data[s == 3,]
str(validation)
str(test)
svm.fit <- ksvm(train, validation, type="C-svc", kernel = "vanilladot", C = 100, scaled = TRUE)
svm.fit <- ksvm(as.matrix(train[,1:10]), as.factor(validation[,11]), type="C-svc", kernel = "vanilladot", C = 100, scaled = TRUE)
datamatrix <- as.matrix(data)
head(datamatrix)
svm.fit <- ksvm(datamatrix[,1:10], datamatrix[,11], type="C-svc", kernel = "vanilladot", C = 100, scaled = TRUE)
pred <- predict(svm.fit, data[,1:10])
pred
sum(pred == data[,11]) / nrow(data)
?predict
svm.fit <- ksvm(train, validation, type="C-svc", kernel = "vanilladot", C = 100, scaled = TRUE)
svm.fit <- ksvm(as.matrix(train), as.matrix(validation), type="C-svc", kernel = "vanilladot", C = 100, scaled = TRUE)
svm.fit <- ksvm(as.matrix(train[,1:10]), as.matrix(train[,11]), type="C-svc", kernel = "vanilladot", C = 100, scaled = TRUE)
# predict
pred <- predict(svm.fit, validation)
# predict
pred <- predict(svm.fit, validation[,1:10])
sum(pred == data[,11]) / nrow(data)
sum(pred == validation[,11]) / nrow(data)
?HoltWinters
setwd("C:/Users/ROMEST/Downloads/homework/Week 3")
library("smooth")
set.seed(888)
data <- read.table("temps.txt", header = T)
# create vector of data by unlisting the data frame
data.vc <- unlist(data[,-1])
# plot the data as line chart
plot(data.vc, type = "l")
# model
HW.fit <- es(data.vc, model = "AAM")
# the model gives "beta" value of 0.000. "Beta" is the trand smoothing function
# a value near 0 means there is no significant trend, suggesting there is not a
# significant increase or decrease over the years.
HW.fit[4]
# vecotr x with number of data points
x <- 1:length(data.vc)
# y with predicted data
y <- HW.fit[4]
# unlist
y<- unlist(y)
# extract only data related to the predicted temperature
y <- y[1:length(data.vc)]
# add line for predicted values on previous graph
lines(x, y, col = "blue")
str(data)
length(HW.fit[4])
length(y)
120*20
head(y)
122*20
tail(y)
str(y)
head(data)
length(data.vc)
data.vc
tail(data.vc)
str(data)
length(data$X1996)
122*21
122*20
typeof(y)
?split
l <- split(y, 20)
l
split(1:10, 1:2)
head(l)
l[1]
l[2]
# split HW.fit into years
s <- as.vector(y)
head(s)
splitted <- split(s, s/20)
head(splitted)
splitted[1]
length(2)
length(s)
2460/20
splitted <- split(s, 123)
splitted
splitted <- split(s, 20)
splitted
splitted[+2]
splitted[+Ã¬2]
splitted[2]
splitted <- split(s, ceiling(seq_along(s)/20))
splitted
length(y)
2460/123
splitted <- split(s, ceiling(seq_along(s)/123))
splitted
splitted[1]
length(splitted)
y.dataframe <- 0
# create data frame from splitted data
for (i in 1:length(splitted)) {
y.dataframe[,i] <- cbind(y.dataframe, splitted[i])
}
l <- as.data.frame(splitted)
str(l)
head(l)
y.dataframe <- as.data.frame(splitted)
str(y.dataframe)
colnames(data)
y.dataframe <- cbind(data$DAY, y.dataframe)
str(y.dataframe)
head(y.dataframe)
tail(y.dataframe)
head(y.dataframe)
head(data)
y.dataframe
head(y.dataframe)
# initialize parameter
C <- 3
# initialized empty matrix for storing data
st <- matrix(0, nrow = nrow(y.dataframe), ncol = ncol(y.dataframe))
# loop over columns
for (j in 1:ncol(t.dataframe)){
# row avg
avgr <- mean(y.dataframe[,j])
# loop over rows
for (i in 1:nrow(y.dataframe)){
# first loop
if (i == 1) {
if (0 + (y.dataframe[i,j] - avgr - C) > 0){
st[i, j] <- 0 + (y.dataframe[i,j] - avgr - C)
} else {
st[i, j] <- 0
}
} else {
if (st[i-1] + (y.dataframe[i,j]- avgr - C) > 0){
st[i, j] <- st[i-1] + (y.dataframe[i,j] - avgr - C)
} else {
st[i, j] <- 0
}
}
}
}
# transform intro data frame my cusum values
st <- as.data.frame(st)
y.dataframe <- as.data.frame(splitted)
# initialize parameter
C <- 3
# initialized empty matrix for storing data
st <- matrix(0, nrow = nrow(y.dataframe), ncol = ncol(y.dataframe))
# loop over columns
for (j in 1:ncol(y.dataframe)){
# row avg
avgr <- mean(y.dataframe[,j])
# loop over rows
for (i in 1:nrow(y.dataframe)){
# first loop
if (i == 1) {
if (0 + (y.dataframe[i,j] - avgr - C) > 0){
st[i, j] <- 0 + (y.dataframe[i,j] - avgr - C)
} else {
st[i, j] <- 0
}
} else {
if (st[i-1] + (y.dataframe[i,j]- avgr - C) > 0){
st[i, j] <- st[i-1] + (y.dataframe[i,j] - avgr - C)
} else {
st[i, j] <- 0
}
}
}
}
# transform intro data frame my cusum values
st <- as.data.frame(st)
st
str(st)
# find max for each year
for (i in 1:ncol(st)){
M <- which.max(st[,i])
}
M
# find max for each year
for (i in 1:ncol(st)){
M[i] <- which.max(st[,i])
}
M
y.dataframewithday <- cbind(data$DAY, y.dataframe)
HW.fit[4]
summary(HW.fit)
M
y.dataframewithday[56,1]
y.dataframewithday[62,4]
y.dataframewithday[62,1]
length(M)
ncol(y.dataframe)
which.max(y.dataframewithday[1,1])
which.max(y.dataframe)
which.max(y.dataframe[which.max(M),1])
which.max(y.dataframe[which.max(M[1]),1])
which.max(y.dataframe[which.max(M[2]),1])
M
M[1]
y.dataframewithday[which.max(M[1]),]
y.dataframewithday[which.max(M[1]),1]
y.dataframewithday[M[1],1]
# subset data with day to find when CUSUM reached max for each year
Mval <- matrix(0, nrow = length(M), ncol = 2)
str(Mval)
y.dataframewithday[M[1],1]
# subset data with day to find when CUSUM reached max for each year
Mval <- matrix(0, nrow = length(M), ncol = 2)
# loop for rows values
for (i in 1:length(M)){
Mval[i,1] <- y.dataframewithday[M[i], 1]
}
Mval
y.dataframewithday[1,1]
M[i]
y.dataframewithday[57,1]
# subset data with day to find when CUSUM reached max for each year
Mval <- matrix(0, nrow = length(M), ncol = 2)
# loop for rows values
for (i in 1:length(M)){
Mval[i,1] <- y.dataframewithday[M[i], 1]
Mval[i,2] <- y.dataframewithday[M[i], 2]
}
Mval
# subset data with day to find when CUSUM reached max for each year
Mval <- matrix(0, nrow = length(M), ncol = 2)
# loop for rows values
for (i in 1:length(M)){
Mval[i,1] <- y.dataframewithday[M[i], 1]
print(Mval[i,1])
Mval[i,2] <- y.dataframewithday[M[i], 2]
}
head(y.dataframewithday)
# subset data with day to find when CUSUM reached max for each year
Mval <- matrix(0, nrow = length(M), ncol = 2)
# loop for rows values
for (i in 1:length(M)){
Mval[i,1] <- y.dataframewithday[M[i], 1]
print(M[i])
Mval[i,2] <- y.dataframewithday[M[i], 2]
}
M
y.dataframewithday[56,1]
Mval
# subset data with day to find when CUSUM reached max for each year
Mval <- matrix(0, nrow = length(M), ncol = 2)
# loop for rows values
for (i in 1:length(M)){
Mval[i,1] <- y.dataframewithday[M[i], 1]
print(M[i])
Mval[i,2] <- y.dataframewithday[M[i], i]
}
Mval
y.dataframewithday[1, 1]
y.dataframewithday[2, 1]
y.dataframewithday[3, 1]
?matrix
# subset data with day to find when CUSUM reached max for each year
Mval <- matrix(nrow = length(M), ncol = 2)
# loop for rows values
for (i in 1:length(M)){
Mval[i,1] <- y.dataframewithday[M[i], 1]
print(M[i])
Mval[i,2] <- y.dataframewithday[M[i], i]
}
Mval
Mval
M
str(y.dataframewithday)
head(y.dataframewithday)
# subset data with day to find when CUSUM reached max for each year
Mval <- matrix(nrow = length(M), ncol = 2)
# loop for rows values
for (i in 1:length(M)){
print(y.dataframewithday[M[i]],i)
}
# subset data with day to find when CUSUM reached max for each year
Mval <- matrix(nrow = length(M), ncol = 2)
# loop for rows values
for (i in 1:length(M)){
print(y.dataframewithday[M[i],i])
}
# subset data with day to find when CUSUM reached max for each year
Mval <- matrix(nrow = length(M), ncol = 2)
# loop for rows values
for (i in 1:length(M)){
Mval[i,1] <- y.dataframewithday[M[i],1]
}
Maval
Mval
View(Mval)
View(Mval)
head(y.dataframewithday)
head(y.dataframewithday[,1])
# subset data with day to find when CUSUM reached max for each year
Mval <- matrix(nrow = length(M), ncol = 2)
# loop for rows values
for (i in 1:length(M)){
Mval[i,1] <- as.factor(y.dataframewithday[M[i],1])
}
Mval
# print dates in which CUSUM max for each year
for (i in 1:length(M)){
D[i] <- y.dataframewithday[M[i],1]
}
D
D <- 0
for (i in 1:length(M)){
D[i] <- y.dataframewithday[M[i],1]
}
D
typeof(y.dataframewithday)
p <- as.data.frame(y.dataframwithday)
p <- as.data.frame(y.dataframewithday)
str(p)
str(y.dataframewithday)
D <- y.dataframewithday[M,1]
D
T <- 0
for (i in 1:ncol(y.dataframe)){
T[i] <- y.dataframe[M[i],i]
}
T
M
y.dataframewithday[57,20]
T
y.dataframewithday[56,1]
y.dataframewithday[56,2]
?plot
plot(T, D)
plot(D, T, type = "l")
plot(T, D, type = "l")
D
hist(D)
str(data)
Y <- 1996:2015
Y
plot(Y,D)
plot(Y,D, type="l")
?axis
plot(D, Y, type = "l")
D <- y.dataframewithday[M,1]
Y <- 1996:2015
plot(D, Y, type = "l")
D <- y.dataframewithday[M,1]
Y <- 1996:2015
plot(Y, D, type = "l")
axis(1, Y)
axis(2, D)
D
?axis.Date
D <- y.dataframewithday[M,1]
Y <- 1996:2015
plot(Y, D, type = "l", xaxt= "n", yaxt = "n")
axis(1, Y)
axis.Date(2, at = D)
?axis.Date
D
D <- y.dataframewithday[M,1]
Y <- 1996:2015
plot(Y, D, type = "l", xaxt= "n", yaxt = "n")
axis(1, Y)
axis.Date(2, at = D, format = "%d-%b")
typeof(D)
D <- y.dataframewithday[M,1]
Y <- 1996:2015
plot(Y, D, type = "l", xaxt= "n", yaxt = "n")
axis(1, Y)
axis.Date(2, at = as.string(D), format = "%d-%b")
D <- y.dataframewithday[M,1]
Y <- 1996:2015
plot(Y, D, type = "l", xaxt= "n", yaxt = "n")
axis(1, Y)
axis.Date(2, at = toString(D), format = "%d-%b")
D
D
D <- y.dataframewithday[M,1]
Y <- 1996:2015
plot(Y, D, type = "l", xaxt= "n", yaxt = "n")
axis(1, Y)
axis.Date(2, at = toString(D), format = "%d-%h")
lD
D
Y
D <- y.dataframewithday[M,1]
Y <- 1996:2015
plot(Y, D, type = "l", xaxt= "n", yaxt = "n")
axis(1, Y)
axis.Date(2, at = D, format = "%d-%h")
typeof(D)
class(D)
D <- y.dataframewithday[M,1]
Y <- 1996:2015
plot(Y, D, type = "l", xaxt= "n", yaxt = "n")
axis(1, Y)
axis.Date(2, at = as.numeric(as.character(D)), format = "%d-%h")
p <- as.numeric(D)
p
typeof(pÃ¹)
d <- as.Date(as.character(D), format="%d-%b")
d
d <- as.Date(D, format="%d-%b")
d
D
format(Sys.Date(), format = "%d-%b")
Sys.setlocale("LC_TIME", "C")
format(Sys.Date(), format = "%d-%b")
D <- y.dataframewithday[M,1]
Y <- 1996:2015
plot(Y, D, type = "l", xaxt= "n", yaxt = "n")
axis(1, Y)
axis.Date(2, at = D, format = "%d-%b")
format(Sys.Date(), format = "%d-%B")
format(Sys.Date(), format = "%d-%B")
Sys.setlocale("LC_TIME", "C")
D <- y.dataframewithday[M,1]
Y <- 1996:2015
plot(Y, D, type = "l", xaxt= "n", yaxt = "n")
axis(1, Y)
axis.Date(2, at = D, format = "%d-%B")
D
format(Sys.Date(), format = "%d-%B")
Sys.setlocale("LC_TIME", "C")
D <- y.dataframewithday[M,1]
Y <- 1996:2015
plot(Y, D, type = "l", xaxt= "n")
axis(1, Y)
set.seed(888)
format(Sys.Date(), format = "%d-%B")
Sys.setlocale("LC_TIME", "C")
D <- y.dataframewithday[M,1]
Y <- 1996:2015
plot(Y, D, type = "l", xaxt= "n", yaxt = "n")
axis(1, Y)
axis.Date(2, at = D, format = "%d-%B")
d <- as.Date(D)
d <- as.Date(D, format = "%d-%B")
d
format(Sys.Date(), format = "%d-%B")
Sys.setlocale("LC_TIME", "C")
D <- y.dataframewithday[M,1]
d <- as.Date(D, format = "%d-%B")
Y <- 1996:2015
plot(Y, D, type = "l", xaxt= "n", yaxt = "n")
axis(1, Y)
axis.Date(2, at = d, format = "%d-%B")
x <- format(d, format="%d-%B")
x
x <- format(d, format="%d-%b")
x
format(Sys.Date(), format = "%d-%B")
Sys.setlocale("LC_TIME", "C")
D <- y.dataframewithday[M,1]
d <- as.Date(D, format = "%d-%B")
x <- format(d, format="%d-%b")
Y <- 1996:2015
plot(Y, D, type = "l", xaxt= "n", yaxt = "n")
axis(1, Y)
axis.Date(2, at = x, format = "%d-%B")
axis.Date(2, at = as.Date.character(D), format = "%d-%B")
typeof(D)
d <- as.character(D)
typeof(d)
d
D <- y.dataframewithday[M,1]
d <- as.character(D)
Y <- 1996:2015
plot(Y, D, type = "l", xaxt= "n", yaxt = "n")
axis(1, Y)
axis.Date(2, at = d, format = "%d-%B")
table(d)
table(d[1])
table(colnames(d))
typeof(table(d))
unique(d)
axis.Date(2, at = unique(d), format = "%d-%B")
format(Sys.Date(), format = "%d-%B")
Sys.setlocale("LC_TIME", "C")
D <- y.dataframewithday[M,1]
d <- as.character(D)
Y <- 1996:2015
plot(Y, D, type = "l", xaxt= "n", yaxt = "n")
axis(1, Y)
axis.Date(2, at = unique(D), format = "%d-%B")
axis.Date(2, at = unique(D))
unique(D)
unique(d)
axis.Date(2, at = unique(d), format = "%d-%B")
set.seed(888)
data <- read.table("uscrime.txt", header = T)
# train the model on all predictors
glm.fit <- glm(Crime ~ ., family = "gaussian", data)
# data point to use for prediction
p <- cbind(14,0,10,12,15.5,0.640,94,150,1.1,0.120,3.6,3200,20.1,0.04,39)
p <- as.data.frame(p)
colnames(p) <- c("M","So","Ed","Po1","Po2","LF","M.F","Pop","NW","U1","U2","Wealth","Ineq","Prob","Time")
# prediction
prediction <- predict(glm.fit, newdata = p)
# TO DO
# TO DO
# Create second model with less predictors (based on p-values) and compare AIC
# TO DO
# Create second model with less predictors (based on p-values) and compare AIC
axis.Date(2, at = unique(d), format = "%d-%B")
