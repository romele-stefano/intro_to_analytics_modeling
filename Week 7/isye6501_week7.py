# -*- coding: utf-8 -*-
"""ISYE6501-week7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NZ2vaYNJhYWbapQmLJy75QIQOfRLvM69
"""

# connect to Google Drive 
!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

# Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

# install pulp for optimization problem
!pip install pulp

import pandas as pd
# for optimization
from pulp import *

downloaded = drive.CreateFile({'id': '1F72tiSyyEqMfbqNyLwcV3S02yNfEpfXJ'}) 
downloaded.GetContentFile('diet.xls')  
data = pd.read_excel('diet.xls')

# remove last 3 rows because are irrelevant to the problem
data = data.iloc[:-3]

# check if the value are removed form the dataset
data.tail()

# create optimization problem
problem = LpProblem("Diet Problem", LpMinimize)

# create list for each variable
food = list(data['Foods'])
price = dict(zip(food, data['Price/ Serving']))
serving_size = dict(zip(food, data['Serving Size']))
calories = dict(zip(food, data['Calories']))
cholesterol = dict(zip(food, data['Cholesterol mg']))
fat = dict(zip(food, data['Total_Fat g']))
sodium = dict(zip(food, data['Sodium mg']))
carbs = dict(zip(food, data['Carbohydrates g']))
fiber = dict(zip(food, data['Dietary_Fiber g']))
protein = dict(zip(food, data['Protein g']))
vit_a = dict(zip(food, data['Vit_A IU']))
vit_c = dict(zip(food, data['Vit_C IU']))
calcium = dict(zip(food, data['Calcium mg']))
iron = dict(zip(food, data['Iron mg']))

# create variables
# lower bound = 0 because we can't have negative quantities
food_variables = LpVariable.dicts("Food", food, lowBound = 0, cat = 'Integer')

# objective function
problem += lpSum([price[i] * food_variables[i] for i in food])

# constraints
# we should have at least a minimum amount of calories in the diet
problem += lpSum([calories[i] * food_variables[i] for i in food]) >= 1500

# we should not have more than a certain amount of calories in the diet
problem += lpSum([calories[i] * food_variables[i] for i in food]) <= 2500

# add min and max intake for 
# cholesterol
problem += lpSum([cholesterol[i] * food_variables[i] for i in food]) >= 30
problem += lpSum([cholesterol[i] * food_variables[i] for i in food]) <= 240

# fat
problem += lpSum([fat[i] * food_variables[i] for i in food]) >= 20
problem += lpSum([fat[i] * food_variables[i] for i in food]) <= 70

# sodium
problem += lpSum([sodium[i] * food_variables[i] for i in food]) >= 800
problem += lpSum([sodium[i] * food_variables[i] for i in food]) <= 2000

# carbs
problem += lpSum([carbs[i] * food_variables[i] for i in food]) >= 130
problem += lpSum([carbs[i] * food_variables[i] for i in food]) <= 450

# fiber
problem += lpSum([fiber[i] * food_variables[i] for i in food]) >= 125
problem += lpSum([fiber[i] * food_variables[i] for i in food]) <= 250

# protein
problem += lpSum([protein[i] * food_variables[i] for i in food]) >= 60
problem += lpSum([protein[i] * food_variables[i] for i in food]) <= 100

# vit_a
problem += lpSum([vit_a[i] * food_variables[i] for i in food]) >= 1000
problem += lpSum([vit_a[i] * food_variables[i] for i in food]) <= 10000


# vit_c
problem += lpSum([vit_c[i] * food_variables[i] for i in food]) >= 400
problem += lpSum([vit_c[i] * food_variables[i] for i in food]) <= 5000


# calcium
problem += lpSum([calcium[i] * food_variables[i] for i in food]) >= 700
problem += lpSum([calcium[i] * food_variables[i] for i in food]) <= 1500


# iron
problem += lpSum([iron[i] * food_variables[i] for i in food]) >=10
problem += lpSum([iron[i] * food_variables[i] for i in food]) <= 40

# solve the optimization problem and print the status
problem.solve()
print("Status:", LpStatus[problem.status])

# print variables values if greater than 0
for i in problem.variables():
  if i.varValue > 0:
    print(i.name + " = " + str(i.varValue))
    
print ("Total cost = " + str(round(problem.objective.value(),2)) + "$")

# show the problem's formulation
problem